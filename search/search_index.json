{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pythonfs_ud00","title":"PythonFS_UD00","text":"<p>Nota: Parece que dentro de MKDocs no funciona, aunque aqu\u00ed si. Please see the project license for further details</p> <p>Este proyecto utiliza Reflex para crear una aplicaci\u00f3n web b\u00e1sica. A continuaci\u00f3n, se describen los pasos y componentes principales del proyecto.</p>"},{"location":"#ruta-de-aprendizaje","title":"Ruta de Aprendizaje","text":"<ul> <li> Aprender Python B\u00e1sico</li> <li> Aprender FastAPI</li> <li> Aprender ORM</li> <li> Aprender Reflex</li> </ul>"},{"location":"#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<p>Nota inicial (1)</p> <p>Se est\u00e1 usando MKDocs Material, (2) Y poco a poco saldr\u00e1 mejor. Esto es una nota desplegable</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol> Nota desplegable (1) <p>Se est\u00e1 usando MKDocs Material, (2) Y poco a poco saldr\u00e1 mejor. Esto es una nota con anotaciones (+) que pueden seguirse</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"#configuracion","title":"Configuraci\u00f3n","text":"<p>El archivo <code>rxconfig.py</code> contiene la configuraci\u00f3n b\u00e1sica de la aplicaci\u00f3n Reflex:</p> <pre><code>import reflex as rx\n\nconfig = rx.Config(\n    app_name=\"PythonFS_UD00\",\n)\n</code></pre>"},{"location":"#databases","title":"Databases","text":"<p>Reflex uses sqlmodel to provide a built-in ORM wrapping SQLAlchemy.</p> <p>The examples on this page refer specifically to how Reflex uses various tools to expose an integrated database interface. Only basic use cases will be covered below, but you can refer to the sqlmodel tutorial for more examples and information, just replace SQLModel with rx.Model and Session(engine) with rx.session()</p> <p>For advanced use cases, please see the SQLAlchemy docs (v1.4).</p>"},{"location":"#connecting","title":"Connecting","text":"<p>Reflex provides a built-in SQLite database for storing and retrieving data.</p> <p>You can connect to your own SQL compatible database by modifying the rxconfig.py file with your database url.</p> <p><pre><code>config = rx.Config(\n    app_name=\"my_app\",\n    db_url=\"sqlite:///reflex.db\",\n)\n</code></pre> For more examples of database URLs that can be used, see the SQLAlchemy docs. Be sure to install the appropriate DBAPI driver for the database you intend to use.</p>"},{"location":"#tables","title":"Tables","text":"<p>To create a table make a class that inherits from rx.Model with and specify that it is a table.</p> <pre><code>class User(rx.Model, table=True):\n    username: str\n    email: str\n    password: str\n</code></pre>"},{"location":"#migrations","title":"Migrations","text":"<p>Reflex leverages alembic to manage database schema changes.</p> <p>Before the database feature can be used in a new app you must call <code>reflex db init</code> to initialize alembic and create a migration script with the current schema.</p> <p>After making changes to the schema, use <code>reflex db makemigrations --message 'something changed'</code> to generate a script in the alembic/versions directory that will update the database schema. It is recommended that scripts be inspected before applying them.</p> <p>The <code>reflex db migrate</code> command is used to apply migration scripts to bring the database up to date. During app startup, if Reflex detects that the current database schema is not up to date, a warning will be displayed on the console.</p> <p>Nota: Todo este sistema de BBDD integrado se encarga de: 1. Crear/usar la BBDD configurada en rxconfig.py 2. Crear/mantener las tablas y definiciones de acuerdo a las clases que heredan de rx.Model.</p> <p>Para ello, la combinaci\u00f3n de los tres comandos anteriores, ofrecen:</p> <ol> <li>La inicializaci\u00f3n de la BBDD         <code>reflex db init</code></li> <li> <p>La creaci\u00f3n/actualizaci\u00f3n de un esquema de BBDD seg\u00fan las clases que heredan de rx.Model         <code>reflex db makemigrations [--message 'something changed']</code></p> <pre><code>Nota: Para que se cree/modifique la BBDD, las class model han de ser visibles desde el fichero principal del proyecto Reflex.\n</code></pre> </li> <li> <p>La aplicaci\u00f3n de dicho esquema a la BBDD en producci\u00f3n.         <code>reflex db migrate</code></p> </li> </ol>"},{"location":"FastAPI/","title":"Contribuci\u00f3n a la traducci\u00f3n de FastAPI (es)","text":""},{"location":"FastAPI/#requisitos-previos","title":"Requisitos previos","text":"<ol> <li>Usando GitHub, realizar un fork del repositorio fastapi/fastapi</li> </ol> <p>Ej. FastAPI_fork</p> <ol> <li>Clonar el fork en local</li> </ol>"},{"location":"FastAPI/#python-preparacion-del-entorno","title":"Python: Preparaci\u00f3n del entorno","text":""},{"location":"FastAPI/#creacion-del-entorno-virtual","title":"Creaci\u00f3n del entorno virtual","text":"<p>Para ello, </p> <pre><code>    python -m venv -venv\n</code></pre> <p>Modificar el fichero .gitignore a\u00f1adiendo .venv</p>"},{"location":"FastAPI/#instalacion-de-librerias-de-python-requeridas","title":"Instalaci\u00f3n de librer\u00edas de Python requeridas","text":"<p>Para ello, </p> <pre><code>    pip install -r requirements.txt\n</code></pre>"},{"location":"about/","title":"Acerca de","text":"<p>Copyright \u00a9 2024 Juan Carlos Trapero S\u00e1nchez</p>"},{"location":"license/","title":"Licencia","text":""},{"location":"license/#opensource","title":"OpenSource","text":""},{"location":"diagramas/Ej_Mermaid%20Clases/","title":"Clases","text":"<pre><code>---\ntitle: Diagrama de Clases Ejemplo con Markdown Mermaid Extension\n---\nclassDiagram\n    note \"From Duck till Zebra\"\n    Animal &lt;|-- Duck\n    note for Duck \"can fly\\ncan swim\\ncan dive\\ncan help in debugging\"\n    Animal &lt;|-- Fish\n    Animal &lt;|-- Zebra\n    Animal &lt;|-- Human\n    Fish &lt;|-- Sardina\n\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{     \n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }\n    class Human{\n        +bool is_silly\n        +crack()\n    }\n    class Sardina{\n        +String omega3\n        +brasear()\n    }</code></pre>"},{"location":"diagramas/Ej_Mermaid%20Gantt/","title":"Gantt","text":"<pre><code>---\ntitle: Diagrama de Gantt Ejemplo con Markdown Mermaid Extension\n---\ngantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d\n</code></pre>"},{"location":"diagramas/Ej_Mermaid%20MindMap/","title":"MindMap","text":"<pre><code>---\ntitle: Diagrama de Secuencia Ejemplo con Markdown Mermaid Extension\n---\nmindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness&lt;br/&gt;and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid</code></pre>"},{"location":"diagramas/Ej_Mermaid%20Secuencia/","title":"Secuencia","text":"<pre><code>---\ntitle: Diagrama de Secuencia Ejemplo con Markdown Mermaid Extension\n---\nsequenceDiagram\n    autonumber\n    Alice-&gt;&gt;John: Hello John, how are you?\n    loop HealthCheck\n        John-&gt;&gt;John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts!\n    John--&gt;&gt;Alice: Great!\n    John-&gt;&gt;Bob: How about you?\n    Bob--&gt;&gt;John: Jolly good!</code></pre>"}]}